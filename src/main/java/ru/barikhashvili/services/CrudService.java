package ru.barikhashvili.services;

import ru.barikhashvili.exceptions.InsufficientDataException;
import ru.barikhashvili.exceptions.ResourceNotFoundException;

import java.util.List;

/**
 * Интерфейс для совершения CRUD операций над Hibernate Entity
 *
 * @param <T> Data Transfer Object изменяемой сущности.
 * @param <I> Класс уникального идентификатора сущности.
 */
public interface CrudService<T, I> {
    /**
     * Добавляет новую сущность в базу данных и возвращает информацию о добавленной сущности.
     * Этот метод требует, чтобы полученный в аргументе entityDTO содержал полную информацию
     * о добавляемой сущности.
     *
     * @param entityDTO объект со сведениями о добавляемой сущности (объект должен содержать все сведения).
     * @return объект T с полной информацией о добавленной сущности из базы данных.
     * @throws InsufficientDataException если данные о добавляемой сущности отсутствуют или указаны частично.
     */
    T saveEntity(T entityDTO);

    /**
     * Находит и возвращает данные о сущности с указанным идентификатором.
     *
     * @param id уникальный идентификатор сущности, которую необходимо найти
     * @return объект T с полными сведениями о сущности.
     * @throws ResourceNotFoundException если сущность с указанным id не найдена в базе данных
     */
    T getEntityById(I id);

    /**
     * Находит и возвращает список всех сущностей.
     *
     * @return список T с полными сведениями о всех сущностях из базы данных.
     */
    List<T> getAllEntities();

    /**
     * Удаляет сущность с указанным id из базы данных и возвращает сведения об удалённой сущности.
     *
     * @param id уникальный идентификатор сущности, который необходимо удалить.
     * @throws ResourceNotFoundException если сущность с указанным id не найдена в базе данных.
     */
    T removeEntityById(I id);

    /**
     * Полностью обновляет информацию о сущности в базе данных и возвращает объект с обновленной информацией.
     * Этот метод требует, чтобы полученный в аргументе entityDTO содержал полную информацию об изменяемой сущности.
     * Важно: Этот метод не позволяет изменять id сущности.
     *
     * @param id  уникальный идентификатор обновляемой сущности, данные которой необходимо изменить.
     * @param entityDTO объект с новыми сведениями об изменяемой сущности (Он должен содержать все сведения о сущности).
     * @return объект T с обновленной информацией об измененной сущности из базы данных.
     * @throws InsufficientDataException если данные об изменяемой сущности отсутствуют.
     * @throws ResourceNotFoundException если изменяемая сущность не найдена по id.
     */
    T editEntity(I id, T entityDTO);

    /**
     * Частично или полностью обновляет информацию о сущности в базе данных и возвращает обновлённую
     * информацию о сущности. Если изменяемые данные пустые или не переданы, то изменения не происходят
     * и возвращается объект из базы данных по указанному идентификатору.
     * Важно: Этот метод не позволяет изменять id сущности.
     *
     * @param id  уникальный идентификатор обновляемой сущности, данные которой необходимо изменить.
     * @param entityDTO объект с обновленными сведениями об изменяемой сущности.
     * @return объект T с обновленной информацией об изменяемой сущности из базы данных.
     * @throws ResourceNotFoundException если изменяемая сущность не найдена по id.
     */
    T editPartOfEntity(I id, T entityDTO);
}
